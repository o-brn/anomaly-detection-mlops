name: CI Pipeline

# Define os gatilhos que iniciam o workflow.
on:
  # Executa em cada push.
  push:
    branches: [ main ]
  # Executa em cada pull request aberto ou atualizado.
  pull_request:
    branches: [ main ]

# Define a lista de jobs.
jobs:
  # O nome do job. 
  build-and-test:
    # Define o tipo de máquina virtual que executará o job.
    runs-on: windows-latest

    # Define a sequência de passos.
    steps:
      # Passo 1: Clona o código do seu repositório para a máquina virtual.
      # A action 'checkout' é essencial para que o workflow possa acessar seus arquivos.
      - name: Check out repository
        uses: actions/checkout@v4

      # Passo 2: Configura o ambiente Python na versão especificada.
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Passo 3: Instala a ferramenta 'uv'.
      - name: Install uv
        run: pip install uv
        shell: pwsh

      # Passo 4: Cria o ambiente virtual.
      # O comando 'uv venv' cria uma pasta .venv com um ambiente Python isolado.
      - name: Create Virtual Environment
        run: uv venv .venv
        shell: pwsh

      # Passo 5: Adiciona os scripts do venv ao PATH do GitHub Actions.
      # Isso torna os executáveis instalados no venv (ruff, mypy, pytest)
      # disponíveis para os passos seguintes do workflow.
      - name: Add venv to PATH
        run: echo ".\.venv\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Append
        shell: pwsh


      # Passo 6: Descobre onde o 'uv' guarda seus arquivos de cache.
      # Este passo é importante para informar à action de cache qual diretório salvar.
      - name: Get uv cache directory
        id: get-uv-cache-dir # Define um ID para este passo, para que possamos usar seu resultado depois.
        run: echo "UV_CACHE_DIR=$(uv cache dir)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        shell: pwsh

      # Passo 7: Gerencia o cache das dependências para acelerar futuras execuções.
      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          # Define qual diretório deve ser salvo no cache (o que descobrimos no passo anterior).
          path: ${{ steps.get-uv-cache-dir.outputs.UV_CACHE_DIR }}
          # Cria uma chave única para o cache. Se o 'pyproject.toml' mudar, a chave muda e um novo cache é criado.
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
          # Chave alternativa para restauração, caso a chave exata não seja encontrada.
          restore-keys: |
            ${{ runner.os }}-uv-

      # Passo 8: Instala as dependências do projeto e de desenvolvimento usando o 'uv'.
      # Se o cache foi restaurado com sucesso no passo anterior, este comando será quase instantâneo.
      - name: Install dependencies with uv
        run: uv pip install .[dev]
        shell: pwsh

      # Passo 9: Verifica se a formatação do código está correta com o Ruff.
      # O '--check' não modifica os arquivos, apenas falha se houver erro de formatação.
      - name: Check formatting with Ruff
        run: ruff format --check .

      # Passo 10: Analisa o código em busca de possíveis erros, bugs e problemas de estilo com o linter do Ruff.
      - name: Lint with Ruff
        run: ruff check .

      # Passo 11: Realiza a verificação estática de tipos para encontrar inconsistências entre os tipos de dados.
      - name: Type check with Mypy
        run: mypy .

      # Passo 12: Executa a suíte de testes automatizados do projeto com o Pytest.
      - name: Test with pytest
        run: pytest